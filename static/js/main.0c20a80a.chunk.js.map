{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactItem/ContactItem.module.css","components/Container/Container.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Container/Container.js","components/Filter/Filter.js","components/App.jsx","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","console","log","handleInputChange","event","currentTarget","value","reset","className","css","form","preventDefault","formInputLabel","formInput","type","onChange","pattern","title","required","formInputBtn","ContactItem","onDelete","contactItemName","contactItemNumber","deleteBtn","onClick","ContactList","contacts","onDeleteContact","map","id","contactItem","Container","children","container","Filter","filterInput","App","setContacts","filter","setFilter","useEffect","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","data","contact","uuidv4","doubleContact","find","toLowerCase","toast","error","normalizedFilter","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,UAAY,+BAA+B,eAAiB,oCAAoC,aAAe,oC,mBCAlKD,EAAOC,QAAU,CAAC,gBAAkB,qCAAqC,kBAAoB,uCAAuC,UAAY,iC,qCCAhJD,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,YAAc,8B,8JCIjB,SAASC,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SACpC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEAC,QAAQC,IAAIL,GAEZ,IAAMM,EAAoB,SAAAC,GACxBH,QAAQC,IAAIH,GACZ,MAAwBK,EAAMC,cAAtBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACN,IAAK,OACHC,EAAQQ,GACR,MAEF,IAAK,SACHN,EAAUM,GACV,MAEF,QACE,SAUAC,EAAQ,WACZT,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAMQ,UAAWC,IAAIC,KAAMf,SAZR,SAAAS,GACnBA,EAAMO,iBACNhB,EAAS,CAAEE,OAAME,WACjBQ,KASA,UACE,wBAAOC,UAAWC,IAAIG,eAAtB,iBAEE,uBACEJ,UAAWC,IAAII,UACfC,KAAK,OACLjB,KAAK,OACLS,MAAOT,EACPkB,SAAUZ,EACVa,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,wBAAOV,UAAWC,IAAIG,eAAtB,mBAEE,uBACEJ,UAAWC,IAAII,UACfC,KAAK,MACLjB,KAAK,SACLS,MAAOP,EACPgB,SAAUZ,EACVa,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQV,UAAWC,IAAIU,aAAcL,KAAK,SAA1C,4B,qCC5CSM,EAlBK,SAAC,GAAD,IAAGvB,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQsB,EAAjB,EAAiBA,SAAjB,OAClB,mCACE,8BACE,uBAAMb,UAAWC,IAAIa,gBAArB,UAAuCzB,EAAvC,OACA,sBAAMW,UAAWC,IAAIc,kBAArB,SAAyCxB,IACzC,wBAAQe,KAAK,SAASN,UAAWC,IAAIe,UAAWC,QAASJ,EAAzD,0BCmBSK,EAvBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,gBAAb,OAClB,6BACGD,EAASE,KAAI,gBAAGC,EAAH,EAAGA,GAAIjC,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACZ,oBAAaS,UAAWC,IAAIsB,YAA5B,SACE,cAAC,EAAD,CACElC,KAAMA,EACNE,OAAQA,EACRsB,SAAU,kBAAMO,EAAgBE,OAJ3BA,S,iBCFAE,EAJG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,qBAAKzB,UAAWC,IAAIyB,UAApB,SAAgCD,K,iBCiBnBE,EAjBA,SAAC,GAAD,IAAG7B,EAAH,EAAGA,MAAOS,EAAV,EAAUA,SAAV,OACb,0DAEE,uBACEP,UAAWC,IAAI2B,YACftB,KAAK,OACLR,MAAOA,EACPS,SAAUA,QCFD,SAASsB,IACpB,MAAgCzC,mBAAS,CACrC,CAACkC,GAAI,OAAQjC,KAAM,gBAAiBE,OAAQ,aAC5C,CAAC+B,GAAI,OAAQjC,KAAM,iBAAkBE,OAAQ,aAC7C,CAAC+B,GAAI,OAAQjC,KAAM,gBAAiBE,OAAQ,aAC5C,CAAC+B,GAAI,OAAQjC,KAAM,iBAAkBE,OAAQ,eAJjD,mBAAO4B,EAAP,KAAiBW,EAAjB,KAOA,EAA4B1C,mBAAS,IAArC,mBAAO2C,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACN,IAAMd,EAAWe,aAAaC,QAAQ,YAChCC,EAAiBC,KAAKC,MAAMnB,GAC9BiB,IACA3C,QAAQC,IAAI0C,GACZN,EAAYM,MAEjB,IAEHH,qBAAU,WACNC,aAAaK,QAAQ,WAAYF,KAAKG,UAAUrB,MACjD,CAACA,IAoCJ,OACI,eAAC,EAAD,WACI,cAAC,IAAD,IACA,2CACA,cAACjC,EAAD,CAAaC,SAtCK,SAACsD,GAEvB,IAAMC,EAAU,CACZpB,GAAIqB,cACJtD,KAAMoD,EAAKpD,KACXE,OAAQkD,EAAKlD,QAIXqD,EAAgBzB,EAAS0B,MAAK,SAAAH,GAAO,OAAIA,EAAQrD,KAAKyD,gBAAkBL,EAAKpD,KAAKyD,iBAEpFF,EACAG,IAAMC,MAAN,UAAeP,EAAKpD,KAApB,4BAIJyC,EAAY,CAACY,GAAF,mBAAcvB,QAuBrB,0CACA,cAAC,EAAD,CAAQrB,MAAOiC,EAAQxB,SArBV,SAAAX,GACjBoC,EAAUpC,EAAMC,cAAcC,UAqB1B,cAAC,EAAD,CACIqB,SAnBe,WACvB,IAAM8B,EAAmBlB,EAAOe,cAChC,OAAO3B,EAASY,QAAO,SAAAW,GAAO,OAC1BA,EAAQrD,KAAKyD,cAAcI,SAASD,MAgBtBE,GACV/B,gBAbU,SAACgC,GACnBtB,EAAYX,EAASY,QAAO,SAAAW,GAAO,OAAIA,EAAQpB,KAAO8B,Y,MCxD9DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC1B,EAAD,MAEF2B,SAASC,eAAe,W","file":"static/js/main.0c20a80a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2yRO4\",\"formInput\":\"ContactForm_formInput__3pZYc\",\"formInputLabel\":\"ContactForm_formInputLabel__2w6dL\",\"formInputBtn\":\"ContactForm_formInputBtn__23Snl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItemName\":\"ContactItem_contactItemName__19BqA\",\"contactItemNumber\":\"ContactItem_contactItemNumber__2NPZ_\",\"deleteBtn\":\"ContactItem_deleteBtn__3niTN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1Cufo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__1tf0F\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport css from './ContactForm.module.css';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  console.log(name);\n\n  const handleInputChange = event => {\n    console.log(number);\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.formInputLabel}>\n        Name\n        <input\n          className={css.formInput}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={css.formInputLabel}>\n        Number\n        <input\n          className={css.formInput}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className={css.formInputBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport css from './ContactItem.module.css';\n\nconst ContactItem = ({ name, number, onDelete }) => (\n  <>\n    <p>\n      <span className={css.contactItemName}>{name}:</span>\n      <span className={css.contactItemNumber}>{number}</span>\n      <button type=\"button\" className={css.deleteBtn} onClick={onDelete}>\n        Delete\n      </button>\n    </p>\n  </>\n);\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\n\nimport ContactItem from 'components/ContactItem';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id} className={css.contactItem}>\n        <ContactItem\n          name={name}\n          number={number}\n          onDelete={() => onDeleteContact(id)}\n        />\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  ).isRequired,\n  onDeleteContact: PropTypes.func,\n};\n\nexport default ContactList;\n","import React from 'react';\nimport css from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={css.container}>{children}</div>\n);\n\nexport default Container;\n","import React from 'react';\nimport css from './Filter.module.css';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contacts by name\n    <input\n      className={css.filterInput}\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nimport ContactForm from './ContactForm';\r\nimport ContactList from './ContactList';\r\nimport Container from './Container';\r\nimport Filter from './Filter';\r\n\r\nexport default function App() {\r\n    const [contacts, setContacts] = useState([\r\n        {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n        {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n        {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n        {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n    ]);\r\n\r\n    const [filter, setFilter] = useState('');\r\n\r\n    useEffect(() => {\r\n        const contacts = localStorage.getItem('contacts');\r\n        const parsedContacts = JSON.parse(contacts);\r\n        if (parsedContacts) {\r\n            console.log(parsedContacts);\r\n            setContacts(parsedContacts);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('contacts', JSON.stringify(contacts));\r\n    }, [contacts]);\r\n\r\n    const formSubmitHandler = (data) => {\r\n        // Добавление контакта\r\n        const contact = {\r\n            id: uuidv4(),\r\n            name: data.name,\r\n            number: data.number,\r\n        };\r\n\r\n        // Проверка на дублирование имени\r\n        const doubleContact = contacts.find(contact => contact.name.toLowerCase() === data.name.toLowerCase());\r\n        \r\n        if (doubleContact) {\r\n            toast.error(`${data.name} is alredy in contacts.`);\r\n            return;\r\n        };\r\n\r\n        setContacts([contact, ...contacts]);\r\n    };\r\n\r\n    const changeFilter = event => {\r\n        setFilter(event.currentTarget.value);\r\n    };\r\n\r\n    const getVisibleContacts = () => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    };\r\n\r\n    const deleteContact = (contactId) => {\r\n        setContacts(contacts.filter(contact => contact.id !== contactId));\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Toaster/>\r\n            <h1>Phonebook</h1>\r\n            <ContactForm onSubmit={formSubmitHandler}></ContactForm>\r\n            <h2>Contacts</h2>\r\n            <Filter value={filter} onChange={changeFilter}></Filter>\r\n            <ContactList \r\n                contacts={getVisibleContacts()}\r\n                onDeleteContact={deleteContact}\r\n            ></ContactList>\r\n        </Container>\r\n    )\r\n}\r\n\r\n// class App1 extends Component {\r\n//     state = {\r\n//         contacts: [\r\n//             {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n//             {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n//             {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n//             {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n//         ],\r\n//         filter: ''\r\n//     }\r\n\r\n//     // Фазы жизненного цикла\r\n//     componentDidMount() {\r\n//         console.log('App componentDidMount');\r\n\r\n//         const contacts = localStorage.getItem('contacts');\r\n//         const parsedContacts = JSON.parse(contacts);\r\n\r\n//         if (parsedContacts) {\r\n//             console.log(parsedContacts);\r\n//             this.setState({ contacts: parsedContacts });\r\n//         };\r\n//     };\r\n\r\n//     // Фазы жизненного цикла\r\n//     componentDidUpdate(prevProps, prevState) {\r\n//         const { contacts } = this.state;\r\n\r\n//         console.log('App componentDidUpdate');\r\n//         // До обновления\r\n//         console.log('prevState', prevState);\r\n//         // После обновления\r\n//         console.log('state', this.state);\r\n\r\n//         if (contacts !== prevState.contacts) {\r\n//             console.log('Обновилось поле контактов, записываю контакты в хранилище');\r\n\r\n//             localStorage.setItem('contacts', JSON.stringify(contacts));\r\n//         };\r\n//     }\r\n\r\n//     formSubmitHandler = data => {\r\n//         console.log(data);\r\n\r\n//         // Добавление контакта\r\n//         const contact = {\r\n//             id: uuidv4(),\r\n//             name: data.name,\r\n//             number: data.number,\r\n//         };\r\n\r\n//         // Проверка на дублирование имени\r\n//         const doubleContact = this.state.contacts.find(contact => contact.name.toLowerCase() === data.name.toLowerCase());\r\n        \r\n//         if (doubleContact) {\r\n//             // alert(`${data.name} is alredy in contacts.`);\r\n//             toast.error(`${data.name} is alredy in contacts.`);\r\n//             return;\r\n//         };\r\n\r\n//         // this.setState(prevState => ({\r\n//         //     contacts: [contact, ...prevState.contacts]\r\n//         // }));\r\n\r\n//         // Деструктуризация\r\n//         this.setState(({ contacts }) => ({\r\n//             contacts: [contact, ...contacts]\r\n//         }));\r\n//     };\r\n\r\n//     changeFilter = event => {\r\n//         this.setState({filter: event.currentTarget.value});\r\n//     };\r\n\r\n//     getVisibleContacts = () => {\r\n//         const { filter, contacts } = this.state;\r\n\r\n//         const normalizedFilter = filter.toLowerCase();\r\n//         return contacts.filter(contact =>\r\n//             contact.name.toLowerCase().includes(normalizedFilter),\r\n//         );\r\n//     };\r\n\r\n//     deleteContact = contactId => {\r\n//         this.setState(prevState => ({\r\n//             contacts: prevState.contacts.filter(contact => contact.id !== contactId)\r\n//         }));\r\n//     };\r\n\r\n//     render() {\r\n//         const { formSubmitHandler, changeFilter, deleteContact, getVisibleContacts } = this;\r\n//         const visibleContacts = getVisibleContacts();\r\n\r\n//         // Фазы жизненного цикла\r\n//         console.log('App render');\r\n\r\n//         return (\r\n//             <Container>\r\n//                 <Toaster/>\r\n//                 <h1>Phonebook</h1>\r\n//                 <ContactForm onSubmit={formSubmitHandler}></ContactForm>\r\n//                 <h2>Contacts</h2>\r\n//                 <Filter value={this.state.filter} onChange={changeFilter}></Filter>\r\n//                 <ContactList \r\n//                     contacts={visibleContacts}\r\n//                     onDeleteContact={deleteContact}\r\n//                 ></ContactList>\r\n//             </Container>\r\n//         )\r\n//     }\r\n// };\r\n\r\n// export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n// import reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}